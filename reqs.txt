https://www.obeythetestinggoat.com/book/pre-requisite-installations.html

python 3.6
firefox
selenium
geckodriver
virtualenv
django


roger@Blockbox MINGW64 ~/projects/spend_it_web
$ source virtualenv/Scripts/activate


Functional Tests == Acceptance Test == End-to-End
Test a User Story from User Perspective

Unit Test = Test the code

Django Project:
django-admin.py startproject spendit .


Django App:
python manage.py startapp spend



TDD Workflow
1. Write a functional test, describing the new functionality from the user’s point of view.
2. Think about how to write code that can get the FT to pass
	Write one or more unit tests to define how we want our code to behave.
	The idea is that each line of production code we write should be tested by (at least) one of our unit tests.
3. Failing unit test, we write the smallest amount of application code we can, just enough to get the unit test to pass.
	 Iterate between steps 2 and 3 a few times, until we think the functional test will get a little further.
Rerun our functional tests and see if they pass, or get a little further. That may prompt us to write some new unit tests, and some new code, and so on.

Functional Tests -> ./functional_tests.py
Run by invoking directly
>python functional_tests.py

Unit Tests -> ./spend/tests.py
Run using Django test runner
python manage.py test

Useful Commands and Concepts
Running the Django dev server
python manage.py runserver

Running the functional tests
python functional_tests.py

Running the unit tests
python manage.py test

The unit-test/code cycle
1. Run the unit tests in the terminal.
2. Make a minimal code change in the editor.
3. Repeat!



Djanog
.objects - query the database,
.all() all the entries -> QuerySet
.count() ...

leftover test items are in the db...
Manual Clean up: 
$ rm db.sqlite3
$ python manage.py migrate --noinput

Python List Comprehension
[ expression for item in list if conditional ]
Example:
odd_squares = [ x**2 for x in range(10) if x % 2 == 1 ]

Moving (Renaming) things so git knows it happened!
git mv 


Django has a "LiveServerTestCas" to use a test db for functional tests


http://localhost:8000


TODOs:
=======
TODO: Learn difference between django project and django app
TODO: Need to review Selenium for how to instrument items in the browser!


Expense needs date, where, category, amount... only has text!
support more than one group of expenses
support accounts
support sharing accounts
clean up after FT runs

Date needs to be restricted to dates
Date needs to default to today
Add What/Category
Add Amount


Expense
--location
--date
--category
--amount



Book Todo
Adjust Model so that items are associated with different lists
Add unique URLs for each list
Add URLS for adding a new item to an existing list via POST

Worked through 7.1-7.5

REST like API
view a list
/spends/<spend identifier>/
GET

create new spend it group
/spends/new
POST

add a new expense
/spends/<spend identifier>/add_expense
POST

No Trailing Slash => Action URL - modify DB.
